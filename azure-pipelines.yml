trigger:
- master

variables:
  # Azure Resource Manager service connection
  azureSubscription: 'vvp-pipeline-service-connection'

  # Azure resources
  resourceGroup: 'vvp-pipeline-demo'
  storageAccount: 'vvppipelinestorage'
  blobContainer: 'vvp-pipeline-container'
  servicePrincipal: 'http://vvp-pipeline-service-principal'
  keyVault: 'vvp-pipeline-keyvault'

  # Kubernetes
  kubernetesCluster: 'vvp-pipeline-cluster'
  kubernetesNamespace: 'vvp'

  # Ververica Platform
  vvpNamespace: 'default'
  jarFileName: 'vvp-pipeline-demo-0.1.jar'
  jarLocation: 'wasbs://$(blobContainer)@$(storageAccount).blob.core.windows.net/artifacts/namespaces/$(vvpNamespace)/$(jarFileName)'
  deploymentId: 'd320ec04-16f5-4915-b236-6efa43b7e003'
  deploymentTargetId: '6232cc84-7aa3-4524-b3a8-36cab7203c47'
  vvpDeploymentSpecFile: 'azure-pipelines-vvp-deployment.yml'

stages:

# BuildDeploy stage
- stage: BuildDeploy
  jobs:
  - job: BuildDeploy

    pool:
      vmImage: 'windows-latest' # windows is required by AzureFileCopy@3

    steps:
    - task: Maven@3
      displayName: Maven package

    - task: AzureFileCopy@3
      displayName: Deploy to blob storage
      inputs:
        sourcePath: 'target/$(jarFileName)'
        azureSubscription: '$(azureSubscription)'
        destination: 'AzureBlob'
        storage: '$(storageAccount)'
        containerName: '$(blobContainer)'
        BlobPrefix: 'artifacts/namespaces/$(vvpNamespace)'

# Submit stage
- stage: SubmitCheck
  dependsOn: BuildDeploy
  condition: succeeded()

  jobs:
  - job: SubmitCheck

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: KubectlInstaller@0
      displayName: Install kubectl

    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: '$(azureSubscription)'
        KeyVaultName: '$(keyVault)'
        SecretsFilter: 'servicePrincipalKey,vvpAPIToken,tenantId'

    - bash: |
        az login --service-principal -u $(servicePrincipal) -p $(servicePrincipalKey) --tenant $(tenantId)
        az aks get-credentials --resource-group $(resourceGroup) --name $(kubernetesCluster)
        kubectl port-forward service/vvp-ververica-platform 8080:80 --namespace $(kubernetesNamespace) &
      displayName: Setup access

    - bash: |
        cat "$(vvpDeploymentSpecFile)" | \
            sed -e "s|DEPLOYMENTTARGETID|$(deploymentTargetId)|g" \
                -e "s|JARURI|$(jarLocation)?commit=$(Build.SourceVersion)|g" |
        curl -X PATCH "http://localhost:8080/api/v1/namespaces/$(vvpNamespace)/deployments/$(deploymentId)" \
            -H "Authorization: Bearer $(vvpAPIToken)" \
            -H "accept: application/yaml" -H "Content-Type: application/yaml" -s --data-binary @-
      displayName: PATCH deployment

    - bash: sleep 90
      displayName: Wait

    - bash: |
        state=`curl -X GET "http://localhost:8080/api/v1/namespaces/$(vvpNamespace)/deployments" \
            -H "Authorization: Bearer $(vvpAPIToken)" \
            -H "accept: application/json" -s | \
            jq -r '.items[] | select (.metadata.id == "$(deploymentId)" ) | .status.state'`
        echo "Deployment State is: \"$state\""
        [ "$state" == "RUNNING" ] || exit 1
      displayName: Check state
