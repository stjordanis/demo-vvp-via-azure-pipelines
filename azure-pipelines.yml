resources:
  repositories:
    - repository: 'vvp-pipeline-scripts' # the utility scripts repository
      type: 'github'
      name: 'ververica/vvp-pipeline-scripts'
      endpoint: 'vvp-pipeline-scripts-service-connection'

trigger:
- master

variables:
  # Azure Resource Manager service connection
  azureSubscription: 'vvp-pipeline-service-connection'

  # Azure resources
  resourceGroup: 'vvp-pipeline-demo'
  storageAccount: 'vvppipelinestorage'
  blobContainer: 'vvp-pipeline-container'
  servicePrincipal: 'http://vvp-pipeline-service-principal'
  keyVault: 'vvp-pipeline-keyvault'

  # Kubernetes
  kubernetesCluster: 'vvp-pipeline-cluster'
  kubernetesNamespace: 'vvp'

  # Ververica Platform
  vvpNamespace: 'default'
  vvpDeploymentConfFile: 'azure-pipelines-vvp-deployment.yml'

stages:

# BuildDeploy stage
- stage: BuildDeploy
  jobs:
  - job: BuildDeploy

    pool:
      vmImage: 'windows-latest' # windows is required by AzureFileCopy@3

    steps:
    - task: Maven@3
      displayName: Maven package
      inputs:
        mavenPomFile: 'pom.xml'

    - task: CopyFiles@2
      displayName: Stage artifacts
      inputs:
        SourceFolder: 'target'
        Contents: |
          *.jar
          !original-*.jar
        TargetFolder: '$(build.artifactstagingdirectory)/artifacts'

    - task: AzureFileCopy@3
      displayName: Deploy to blob storage
      inputs:
        sourcePath: '$(build.artifactstagingdirectory)/artifacts'
        azureSubscription: '$(azureSubscription)'
        destination: 'AzureBlob'
        storage: '$(storageAccount)'
        containerName: '$(blobContainer)'
        BlobPrefix: 'artifacts/namespaces/$(vvpNamespace)'

# Submit stage
- stage: SubmitCheck
  dependsOn: BuildDeploy
  condition: succeeded()

  jobs:
  - job: SubmitCheck

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      displayName: Checkout self

    - checkout: vvp-pipeline-scripts
      displayName: Checkout scripts

    - task: KubectlInstaller@0
      displayName: Install kubectl

    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: '$(azureSubscription)'
        KeyVaultName: '$(keyVault)'
        SecretsFilter: 'servicePrincipalKey,vvpAPIToken,tenantId'

    - task: Bash@3
      displayName: Setup local access
      inputs:
        filePath: 'vvp-pipeline-scripts/setup-local-vvp-access.sh'
      env: { SERVICEPRINCIPAL_KEY: $(servicePrincipalKey), TENANT_ID: $(tenantId) }

    - task: Bash@3
      displayName: Search deployment
      inputs:
        filePath: 'vvp-pipeline-scripts/search-deployment-id.sh' # this sets 'deploymentId'
      env: { VVP_APITOKEN: $(vvpAPIToken) }

    - task: Bash@3
      displayName: PATCH deployment
      inputs:
        filePath: 'vvp-pipeline-scripts/update-existing-deployment.sh'
      env: { VVP_APITOKEN: $(vvpAPIToken) }
      condition: and(succeeded(), ne(variables['deploymentId'], '') )

    - task: Bash@3
      displayName: POST deployment
      inputs:
        filePath: 'vvp-pipeline-scripts/create-new-deployment.sh'
      env: { VVP_APITOKEN: $(vvpAPIToken) }
      condition: and(succeeded(), eq(variables['deploymentId'], '') )

    - bash: sleep 90
      displayName: Wait

    - task: Bash@3
      displayName: Check state
      inputs:
        filePath: 'vvp-pipeline-scripts/check-deployment-state.sh'
      env: { VVP_APITOKEN: $(vvpAPIToken) }
